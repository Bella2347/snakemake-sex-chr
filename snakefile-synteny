from snakemake.utils import min_version
min_version("4.4.0")

# Written by Hanna Sigeman, Nov 2019

dir_path = os.getcwd()

##########################################################
######################## PATHS ###########################
##########################################################

ID = config["samples"]
SPECIES = config["species"]
HETEROGAMETIC = config["heterogametic"]
HOMOGAMETIC = config["homogametic"]
FQ_DIR = config["fastq"]
REF_SPECIES = config["ref_species"]
REF_DIR = config["ref_dir"]
REF_NAME = config["ref_name"]
CHROMOSOMES = config["chr_file"]
PREFIX = SPECIES + "_ref_" + REF_SPECIES

REF_PATH = REF_DIR + REF_NAME
REF_FASTA = REF_DIR + REF_NAME + ".fasta"
MAP_DIR = "intermediate/bwa/" + REF_NAME + "/"
GENCOV_DIR = "intermediate/bedtools/" + PREFIX + "/"
GENCOV_DIR_REF = "intermediate/bedtools/" + REF_NAME + "/"
VCF_DIR = "intermediate/freebayes/" + PREFIX + "/"
VCF_DIR_REF = "intermediate/freebayes/" + REF_NAME + "/"
MATCHDIR = "intermediate/synteny_match/" + PREFIX + "/"
RESULTDIR = "results/" + PREFIX + "/"

SYNTENY_SPECIES = config["synteny_species"]
COMP_GEN_SYNS = "intermediate/lastal_" + SYNTENY_SPECIES + "/" + REF_NAME + "/"
SYNS_DB = config["synteny_dir"]

EDIT_DIST = config["edit_distance"]
MIN_SIZE_SCAFFOLD = config["min_size_scaffold"]

##########################################################
######################## RULES ###########################
##########################################################

rule all:
    input:
        REF_FASTA + ".bwt",
        REF_FASTA + ".fai" ,
        expand(MAP_DIR + "{S}.sorted.nodup.nm.{ED}.bam.bai", S = ID, ED = EDIT_DIST),
        expand(MAP_DIR + "{S}.sorted.stats", S = ID),
        expand(MAP_DIR + "{S}.sorted.nodup.nm.{ED}.stats", S = ID, ED = EDIT_DIST),
        expand(MATCHDIR + SPECIES + ".gencov.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out.norm", ED = EDIT_DIST),
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".allFreq.1Mbp.out",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".allFreq.100kbp.out",
        expand(RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov_heterozygosity_indv.{ED}.pdf", ED = EDIT_DIST),
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.plotting.1Mbp.done",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.plotting.100kbp.done",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".N1.plotting.1Mbp.done",
        RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".plotting_chr.done"

##########################################################
################### INCLUDE SNAKEFILE ####################
##########################################################

include: "snakefile"

##########################################################  
#################### SYNTENY ANALYSIS ####################      
########################################################## 

rule fasta_formatter:
    input: 
        REF_FASTA
    output: 
        REF_PATH + "wrap.fasta"
    threads: 1
    shell: 
        """
        fasta_formatter -i {input} -w 80 -o {output}
        """

rule lastal_syns:
    input: 
        REF_PATH + "wrap.fasta"
    output: 
        COMP_GEN_SYNS + REF_SPECIES + "_align"
    params: 
        db = SYNS_DB
    threads: 15
    shell: 
        """
        lastal {params.db} {input} -P 15 | last-split > {output}
        """

rule maf_convert_syns:
    input: 
        COMP_GEN_SYNS + REF_SPECIES + "_align"
    output: 
        COMP_GEN_SYNS + REF_SPECIES + "_align_converted"
    threads: 1
    shell: 
        """
        maf-convert psl {input} > {output}
        """
        
##########################################################
################### MATCHING DATASETS ####################      
##########################################################

rule matchScaffold2Chr:
    input:
        syns = COMP_GEN_SYNS + REF_SPECIES + "_align_converted",
        gencov = GENCOV_DIR_REF + "genome_5kb_windows.out"
    output:
        windows = COMP_GEN_SYNS  + "genome_windows.out",
        bestMatch = COMP_GEN_SYNS + "bestMatch.list",
        log = COMP_GEN_SYNS + "bestMatch.status"
    params:
        temp = COMP_GEN_SYNS + "temp/",
        abswindow = dir_path + "/" + COMP_GEN_SYNS  + "genome_windows.out",
        absBestMatch = dir_path + "/" + COMP_GEN_SYNS + "bestMatch.unfilter.list",
        okWindows = dir_path + "/" + COMP_GEN_SYNS + "okWindows.list",
        absBestMatchFilter = dir_path + "/" + COMP_GEN_SYNS + "bestMatch.list",
        windowsfile = "genome_windows.out",
        absLog = dir_path + "/" + COMP_GEN_SYNS + "bestMatch.status"
    shell:
        """
        cat {input.syns} | awk '{{print $10,$12,$13,$14,$16,$17,$1}}' | sed 's/ /\t/g' | bedtools intersect -a stdin -b {input.gencov} -wa -wb | awk '{{if($10-$9==\"5000\") print $8,$9,$10,$7,$1,$2,$3,$4,$5,$6}}' | sed 's/ /\t/g' | sed 's/\t/STARTCOORD/' | sed 's/\t/ENDCOORD/' > {output.windows}

        mkdir {params.temp}
        cd {params.temp}
        
        awk \'{{print >> $1; close($1)}}\' {params.abswindow}

        ls | while read file; do cat $file | awk -v max=0 '{{if($2>max){{want=$0; max=$2}}}}END{{print want}}' ; done | sed 's/STARTCOORD/\t/' | sed 's/ENDCOORD/\t/' >> {params.absBestMatch} 

        cat {params.absBestMatch} | cut -f 8-10 | sort | uniq -c | awk '$1<=2 {{print}}' | awk '{{print $2,$3,$4}}' | sed 's/ /\t/g' | sort | uniq | bedtools sort > {params.okWindows} 

	bedtools intersect -a <(<{params.absBestMatch} awk '{{print $8,$9,$10,$0}}' | sed 's/ /\t/g' | sort -k1,1 | bedtools sort) -b {params.okWindows} -f 1 -r -wa | cut -f 4- > {params.absBestMatchFilter}

        cd {dir_path}

        rm -r {params.temp}

        echo "DONE" > {params.absLog}
        """

rule matchScaffold2Chr_snp:
    input:
        bestMatch = COMP_GEN_SYNS + "bestMatch.list",
        snp_statistic = VCF_DIR + SPECIES + ".{snp_statistic}.sorted.bed"
    output:
        bestmatch = MATCHDIR + SPECIES + ".{snp_statistic}.bestMatch." + SYNTENY_SPECIES,
        bestmatch_small = MATCHDIR + SPECIES + ".{snp_statistic}.bestMatch." + SYNTENY_SPECIES + ".small"
    threads: 1
    shell:
        """
        bedtools intersect -a {input.bestMatch} -b {input.snp_statistic} -wa -wb > {output.bestmatch}
        
        cut -f 8,9,10,14 {output.bestmatch} > {output.bestmatch_small}
        """

rule matchScaffold2Chr_cov:
    input:
        bestMatch = COMP_GEN_SYNS + "bestMatch.list",
        cov = GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{ED}.out"
    output:
        bestMatch = MATCHDIR + SPECIES + ".gencov.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out",
        bestMatch_norm = MATCHDIR + SPECIES + ".gencov.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out.norm"
    params:
        hetero = expand("het:{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("homo:{homogametic}", homogametic = HOMOGAMETIC)
    threads: 1
    shell:
        """
        bedtools intersect -a {input.bestMatch} -b {input.cov} -wa -wb > {output.bestMatch}

        python3 code/normalize_genCov.py {output.bestMatch} with-synteny {params.hetero} {params.homo} > {output.bestMatch_norm}
        """

##########################################################
##################### CONFIRM SEXING #####################
##########################################################

rule confirm_sexing_synteny:
    input:
        gencov = MATCHDIR + SPECIES + ".gencov.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out",
        het = MATCHDIR + SPECIES + ".heterozygosity.bestMatch." + SYNTENY_SPECIES,
        stats = expand(MAP_DIR + "{S}.sorted.nodup.nm.{{ED}}.stats", S = ID)
    output:
        gencov_het = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov_heterozygosity_indv.{ED}.pdf",
        n1_cov = MATCHDIR + SPECIES + ".N1.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out"
    params:
        hetero = expand("{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("{homogametic}", homogametic = HOMOGAMETIC),
        chromosomes = CHROMOSOMES
    threads: 1
    shell:
        """
        Rscript code/histogram_indv.R {input.gencov} {input.het} {output.gencov_het} {output.n1_cov} with-synteny {params.chromosomes} {params.hetero} {params.homo}
        """

rule n1:
    input:
        n1_cov = MATCHDIR + SPECIES + ".N1.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out"
    output:
        n1_mean = MATCHDIR + SPECIES + ".N1.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out.mean",
        n1_1Mbp = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".N1.nodup.nm.{ED}.1Mbp.out",
        n1_100kbp = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".N1.nodup.nm.{ED}.100kbp.out",
        n1_chr = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".N1.nodup.nm.{ED}.chr.out"
    threads: 1
    params:
        hetero = expand("{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("{homogametic}", homogametic = HOMOGAMETIC),
        chromosomes = CHROMOSOMES
    shell: 
        """
        python3 code/n1_genCov.py {input.n1_cov} with-synteny {params.hetero} {params.homo} > {output.n1_mean}

        Rscript code/calculate_N1_windows.R {output.n1_mean} {output.n1_1Mbp} {output.n1_100kbp} {output.n1_chr} {params.chromosomes}
        """

##########################################################
################ STATISTICAL CALCULATIONS ################
##########################################################

rule calculate_heterozygosity_synteny:
    input:
        MATCHDIR + SPECIES + ".diffHeterozygosity.bestMatch." + SYNTENY_SPECIES + ".small"
    output:
        Mb = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".diffHeterozygosity.1Mbp.out",
        kb = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".diffHeterozygosity.100kbp.out",
        chr = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".diffHeterozygosity.chr.out"
    threads: 1
    params:
        chromosomes = CHROMOSOMES
    shell:
        """
        Rscript code/calculate_hetDiff_windows.R {input} {output.Mb} {output.kb} {output.chr} {params.chromosomes}
        """

rule calculate_allFreq_synteny:
    input:
        MATCHDIR + SPECIES + ".allFreq.bestMatch." + SYNTENY_SPECIES + ".small"
    output:
        Mb = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".allFreq.1Mbp.out",
        kb = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".allFreq.100kbp.out"
    threads: 1
    params:
        chromosomes = CHROMOSOMES
    shell:
        """
        Rscript code/calculate_snpCount_windows.R {input} {output.Mb} {output.kb} {params.chromosomes}
        """

rule calculate_ratio_synteny:
    input:
        MATCHDIR + SPECIES + ".gencov.nodup.nm.{ED}." + SYNTENY_SPECIES + ".out.norm"
    output:
        Mb = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.1Mbp.out",
        kb = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.100kbp.out",
        chr = RESULTDIR + SPECIES + "." + SYNTENY_SPECIES + ".gencov.nodup.nm.{ED}.chr.out"
    threads: 1
    params:
        chromosomes = CHROMOSOMES
    shell:
        """
        Rscript code/calculate_genCov_windows.R {input} {output.Mb} {output.kb} {output.chr} {params.chromosomes}
        """

