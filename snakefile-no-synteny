from snakemake.utils import min_version
min_version("4.4.0")

# Written by Hanna Sigeman, Nov 2019

dir_path = os.getcwd()

##########################################################
######################## PATHS ###########################
##########################################################

ID = config["samples"]
SPECIES = config["species"]
HETEROGAMETIC = config["heterogametic"]
HOMOGAMETIC = config["homogametic"]
FQ_DIR = config["fastq"]
REF_SPECIES = config["ref_species"]
REF_DIR = config["ref_dir"]
REF_NAME = config["ref_name"]
CHROMOSOMES = config["chr_file"]
PREFIX = SPECIES + "_ref_" + REF_SPECIES

REF_PATH = REF_DIR + REF_NAME
REF_FASTA = REF_DIR + REF_NAME + ".fasta"
MAP_DIR = "intermediate/bwa/" + REF_NAME + "/"
GENCOV_DIR = "intermediate/bedtools/" + PREFIX + "/"
GENCOV_DIR_REF = "intermediate/bedtools/" + REF_NAME + "/"
VCF_DIR = "intermediate/freebayes/" + PREFIX + "/"
VCF_DIR_REF = "intermediate/freebayes/" + REF_NAME + "/"
RESULTDIR = "results/" + PREFIX + "/"

EDIT_DIST = config["edit_distance"]

##########################################################
######################## RULES ###########################
##########################################################

rule all:
    input:
        REF_FASTA + ".bwt",
        REF_FASTA + ".fai" ,
        expand(MAP_DIR + "{S}.sorted.nodup.nm.{ED}.bam.bai", S = ID, ED = EDIT_DIST),
        expand(MAP_DIR + "{S}.sorted.stats", S = ID),
        expand(MAP_DIR + "{S}.sorted.nodup.nm.{ED}.stats", S = ID, ED = EDIT_DIST),
        expand(GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{ED}.out.norm", ED = EDIT_DIST),
        RESULTDIR + SPECIES + ".allFreq.1Mbp.out",
        RESULTDIR + SPECIES + ".allFreq.100kbp.out",
        expand(RESULTDIR + SPECIES + ".gencov_heterozygosity_indv.{ED}.pdf", ED = EDIT_DIST),
        RESULTDIR + SPECIES + ".plotting.1Mbp.done",
        RESULTDIR + SPECIES + ".plotting.100kbp.done",
        RESULTDIR + SPECIES + ".plotting_chr.done"

##########################################################
################### INCLUDE SNAKEFILE ####################
##########################################################

include: "snakefile"

##########################################################
################## NO SYNTENY ANALYSIS ###################
##########################################################

rule normalize_cov:
    input:
        GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{ED}.out"
    output:
        GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{ED}.out.norm"
    threads: 1
    params:
        hetero = expand("het:{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("homo:{homogametic}", homogametic = HOMOGAMETIC)
    shell:
        """
        python3 code/normalize_genCov.py {input} no-synteny {params.hetero} {params.homo} > {output}
        """

##########################################################
##################### CONFIRM SEXING #####################
##########################################################

rule confirm_sexing:
    input:
        gencov = GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{nm}.out",
        het = VCF_DIR + SPECIES + ".heterozygosity.sorted.bed",
        stats = expand(MAP_DIR + "{S}.sorted.nodup.nm.{{nm}}.stats", S = ID)
    output:
        gencov_het = RESULTDIR + SPECIES + ".gencov_heterozygosity_indv.{nm}.pdf"
    threads: 1
    params:
        hetero = expand("{heterogametic}", heterogametic = HETEROGAMETIC),
        homo = expand("{homogametic}", homogametic = HOMOGAMETIC),
        chromosomes = CHROMOSOMES
    threads: 1
    shell:
        """
# Make a bash loop and get read lengths for each sample
# print to file with file name
# Read that file into R        
# grep 'average length' 

        Rscript code/histogram_indv.R {input.gencov} {input.het} {output.gencov_het} no-synteny {params.chromosomes} {params.hetero} {params.homo}
        """

##########################################################
################ STATISTICAL CALCULATIONS ################
##########################################################

rule calculate_heterozygosity:
    input:
        VCF_DIR + SPECIES + ".diffHeterozygosity.sorted.bed"
    output:
        Mb = RESULTDIR + SPECIES + ".diffHeterozygosity.1Mbp.out",
        kb = RESULTDIR + SPECIES + ".diffHeterozygosity.100kbp.out",
        chr = RESULTDIR + SPECIES + ".diffHeterozygosity.chr.out"
    threads: 1
    params:
        chromosomes = CHROMOSOMES
    shell:
        """
        Rscript code/calculate_hetDiff_windows.R {input} {output.Mb} {output.kb} {output.chr} {params.chromosomes}
        """

rule calculate_allFreq:
    input:
        VCF_DIR + SPECIES + ".allFreq.sorted.bed"
    output:
        Mb = RESULTDIR + SPECIES + ".allFreq.1Mbp.out",
        kb = RESULTDIR + SPECIES + ".allFreq.100kbp.out"
    threads: 1
    params:
        chromosomes = CHROMOSOMES
    shell:
        """
        Rscript code/calculate_snpCount_windows.R {input} {output.Mb} {output.kb} {params.chromosomes}
        """

rule calculate_ratio:
    input:
        GENCOV_DIR + SPECIES + ".gencov.nodup.nm.{ED}.out.norm"
    output:
        Mb = RESULTDIR + SPECIES + ".gencov.nodup.nm.{ED}.1Mbp.out",
        kb = RESULTDIR + SPECIES + ".gencov.nodup.nm.{ED}.100kbp.out",
        chr = RESULTDIR + SPECIES + ".gencov.nodup.nm.{ED}.chr.out"
    threads: 1
    params:
        chromosomes = CHROMOSOMES
    shell:
        """
        Rscript code/calculate_genCov_windows.R {input} {output.Mb} {output.kb} {output.chr} {params.chromosomes}
        """

